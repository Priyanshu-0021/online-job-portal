import static org.junit.jupiter.api.Assertions.*;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.util.List;

public class JobPortalTest {

    private JobPortal jobPortal;

    @BeforeEach
    public void setUp() {
        jobPortal = new JobPortal("MyJobPortal", "admin@myjobportal.com");
    }

    // Test User Registration
    @Test
    public void testRegisterUser_Success() {
        jobPortal.registerUser("Alice", "Job Seeker");
        List<User> registeredUsers = jobPortal.getRegisteredUsers(); // Assuming you have a getter for this list

        assertEquals(1, registeredUsers.size());
        assertEquals("Alice", registeredUsers.get(0).getUsername());
        assertEquals("Job Seeker", registeredUsers.get(0).getRole());
    }

    // Test Duplicate User Registration
    @Test
    public void testRegisterUser_Duplicate() {
        jobPortal.registerUser("Alice", "Job Seeker");
        jobPortal.registerUser("Alice", "Job Seeker"); // Register the same user again

        List<User> registeredUsers = jobPortal.getRegisteredUsers();

        assertEquals(1, registeredUsers.size()); // Only one user should be registered
    }

    // Test Invalid Role during Registration
    @Test
    public void testRegisterUser_InvalidRole() {
        jobPortal.registerUser("Alice", "Job Seeker");
        jobPortal.registerUser("Bob", "Invalid Role"); // Invalid role

        List<User> registeredUsers = jobPortal.getRegisteredUsers();

        assertEquals(1, registeredUsers.size()); // Only Alice should be registered
    }

    // Test Job Addition
    @Test
    public void testAddJob() {
        jobPortal.addJob("Software Engineer", "TechCorp", "New York", "Develop and maintain software applications.");
        List<Job> jobListings = jobPortal.getJobListings(); // Assuming you have a getter for job listings

        assertEquals(1, jobListings.size());
        assertEquals("Software Engineer", jobListings.get(0).getJobTitle());
    }

    // Test Job Addition with Invalid Details (Empty Fields)
    @Test
    public void testAddJob_InvalidDetails() {
        jobPortal.addJob("", "TechCorp", "New York", ""); // Invalid job details

        List<Job> jobListings = jobPortal.getJobListings();

        assertEquals(0, jobListings.size()); // No job should be added
    }

    // Test User Login
    @Test
    public void testLoginUser_Success() {
        jobPortal.registerUser("Alice", "Job Seeker");

        boolean loginResult = jobPortal.loginUser("Alice");

        assertTrue(loginResult);
    }

    // Test Login with Non-Existing User
    @Test
    public void testLoginUser_Failure() {
        jobPortal.registerUser("Alice", "Job Seeker");

        boolean loginResult = jobPortal.loginUser("NonExistentUser");

        assertFalse(loginResult);
    }
}
